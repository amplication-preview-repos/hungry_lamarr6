/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Affectation as PrismaAffectation } from "@prisma/client";

export class AffectationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AffectationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.affectation.count(args);
  }

  async affectations(
    args: Prisma.AffectationFindManyArgs
  ): Promise<PrismaAffectation[]> {
    return this.prisma.affectation.findMany(args);
  }
  async affectation(
    args: Prisma.AffectationFindUniqueArgs
  ): Promise<PrismaAffectation | null> {
    return this.prisma.affectation.findUnique(args);
  }
  async createAffectation(
    args: Prisma.AffectationCreateArgs
  ): Promise<PrismaAffectation> {
    return this.prisma.affectation.create(args);
  }
  async updateAffectation(
    args: Prisma.AffectationUpdateArgs
  ): Promise<PrismaAffectation> {
    return this.prisma.affectation.update(args);
  }
  async deleteAffectation(
    args: Prisma.AffectationDeleteArgs
  ): Promise<PrismaAffectation> {
    return this.prisma.affectation.delete(args);
  }
}
