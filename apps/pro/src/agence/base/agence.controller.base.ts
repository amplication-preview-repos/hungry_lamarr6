/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AgenceService } from "../agence.service";
import { AgenceCreateInput } from "./AgenceCreateInput";
import { Agence } from "./Agence";
import { AgenceFindManyArgs } from "./AgenceFindManyArgs";
import { AgenceWhereUniqueInput } from "./AgenceWhereUniqueInput";
import { AgenceUpdateInput } from "./AgenceUpdateInput";

export class AgenceControllerBase {
  constructor(protected readonly service: AgenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Agence })
  async createAgence(@common.Body() data: AgenceCreateInput): Promise<Agence> {
    return await this.service.createAgence({
      data: {
        ...data,

        structure: {
          connect: data.structure,
        },

        association: data.association
          ? {
              connect: data.association,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        structure: {
          select: {
            id: true,
          },
        },

        association: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Agence] })
  @ApiNestedQuery(AgenceFindManyArgs)
  async agences(@common.Req() request: Request): Promise<Agence[]> {
    const args = plainToClass(AgenceFindManyArgs, request.query);
    return this.service.agences({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        structure: {
          select: {
            id: true,
          },
        },

        association: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Agence })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async agence(
    @common.Param() params: AgenceWhereUniqueInput
  ): Promise<Agence | null> {
    const result = await this.service.agence({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        structure: {
          select: {
            id: true,
          },
        },

        association: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Agence })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAgence(
    @common.Param() params: AgenceWhereUniqueInput,
    @common.Body() data: AgenceUpdateInput
  ): Promise<Agence | null> {
    try {
      return await this.service.updateAgence({
        where: params,
        data: {
          ...data,

          structure: {
            connect: data.structure,
          },

          association: data.association
            ? {
                connect: data.association,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          structure: {
            select: {
              id: true,
            },
          },

          association: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Agence })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAgence(
    @common.Param() params: AgenceWhereUniqueInput
  ): Promise<Agence | null> {
    try {
      return await this.service.deleteAgence({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,

          structure: {
            select: {
              id: true,
            },
          },

          association: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
