/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Agence as PrismaAgence,
  Structure as PrismaStructure,
  Association as PrismaAssociation,
} from "@prisma/client";

export class AgenceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AgenceCountArgs, "select">): Promise<number> {
    return this.prisma.agence.count(args);
  }

  async agences(args: Prisma.AgenceFindManyArgs): Promise<PrismaAgence[]> {
    return this.prisma.agence.findMany(args);
  }
  async agence(
    args: Prisma.AgenceFindUniqueArgs
  ): Promise<PrismaAgence | null> {
    return this.prisma.agence.findUnique(args);
  }
  async createAgence(args: Prisma.AgenceCreateArgs): Promise<PrismaAgence> {
    return this.prisma.agence.create(args);
  }
  async updateAgence(args: Prisma.AgenceUpdateArgs): Promise<PrismaAgence> {
    return this.prisma.agence.update(args);
  }
  async deleteAgence(args: Prisma.AgenceDeleteArgs): Promise<PrismaAgence> {
    return this.prisma.agence.delete(args);
  }

  async getStructure(parentId: string): Promise<PrismaStructure | null> {
    return this.prisma.agence
      .findUnique({
        where: { id: parentId },
      })
      .structure();
  }

  async getAssociation(parentId: string): Promise<PrismaAssociation | null> {
    return this.prisma.agence
      .findUnique({
        where: { id: parentId },
      })
      .association();
  }
}
