/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EnumStructureTypeFieldService } from "../enumStructureTypeField.service";
import { EnumStructureTypeFieldCreateInput } from "./EnumStructureTypeFieldCreateInput";
import { EnumStructureTypeField } from "./EnumStructureTypeField";
import { EnumStructureTypeFieldFindManyArgs } from "./EnumStructureTypeFieldFindManyArgs";
import { EnumStructureTypeFieldWhereUniqueInput } from "./EnumStructureTypeFieldWhereUniqueInput";
import { EnumStructureTypeFieldUpdateInput } from "./EnumStructureTypeFieldUpdateInput";

export class EnumStructureTypeFieldControllerBase {
  constructor(protected readonly service: EnumStructureTypeFieldService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EnumStructureTypeField })
  async createEnumStructureTypeField(
    @common.Body() data: EnumStructureTypeFieldCreateInput
  ): Promise<EnumStructureTypeField> {
    return await this.service.createEnumStructureTypeField({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EnumStructureTypeField] })
  @ApiNestedQuery(EnumStructureTypeFieldFindManyArgs)
  async enumStructureTypeFields(
    @common.Req() request: Request
  ): Promise<EnumStructureTypeField[]> {
    const args = plainToClass(
      EnumStructureTypeFieldFindManyArgs,
      request.query
    );
    return this.service.enumStructureTypeFields({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EnumStructureTypeField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async enumStructureTypeField(
    @common.Param() params: EnumStructureTypeFieldWhereUniqueInput
  ): Promise<EnumStructureTypeField | null> {
    const result = await this.service.enumStructureTypeField({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EnumStructureTypeField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEnumStructureTypeField(
    @common.Param() params: EnumStructureTypeFieldWhereUniqueInput,
    @common.Body() data: EnumStructureTypeFieldUpdateInput
  ): Promise<EnumStructureTypeField | null> {
    try {
      return await this.service.updateEnumStructureTypeField({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EnumStructureTypeField })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEnumStructureTypeField(
    @common.Param() params: EnumStructureTypeFieldWhereUniqueInput
  ): Promise<EnumStructureTypeField | null> {
    try {
      return await this.service.deleteEnumStructureTypeField({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
