/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FederationService } from "../federation.service";
import { FederationCreateInput } from "./FederationCreateInput";
import { Federation } from "./Federation";
import { FederationFindManyArgs } from "./FederationFindManyArgs";
import { FederationWhereUniqueInput } from "./FederationWhereUniqueInput";
import { FederationUpdateInput } from "./FederationUpdateInput";
import { AssociationFindManyArgs } from "../../association/base/AssociationFindManyArgs";
import { Association } from "../../association/base/Association";
import { AssociationWhereUniqueInput } from "../../association/base/AssociationWhereUniqueInput";

export class FederationControllerBase {
  constructor(protected readonly service: FederationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Federation })
  async createFederation(
    @common.Body() data: FederationCreateInput
  ): Promise<Federation> {
    return await this.service.createFederation({
      data: {
        ...data,

        structure: {
          connect: data.structure,
        },
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        affectationDomaine: true,

        structure: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Federation] })
  @ApiNestedQuery(FederationFindManyArgs)
  async federations(@common.Req() request: Request): Promise<Federation[]> {
    const args = plainToClass(FederationFindManyArgs, request.query);
    return this.service.federations({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        affectationDomaine: true,

        structure: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Federation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async federation(
    @common.Param() params: FederationWhereUniqueInput
  ): Promise<Federation | null> {
    const result = await this.service.federation({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        affectationDomaine: true,

        structure: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Federation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFederation(
    @common.Param() params: FederationWhereUniqueInput,
    @common.Body() data: FederationUpdateInput
  ): Promise<Federation | null> {
    try {
      return await this.service.updateFederation({
        where: params,
        data: {
          ...data,

          structure: {
            connect: data.structure,
          },
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          affectationDomaine: true,

          structure: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Federation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFederation(
    @common.Param() params: FederationWhereUniqueInput
  ): Promise<Federation | null> {
    try {
      return await this.service.deleteFederation({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          affectationDomaine: true,

          structure: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/associations")
  @ApiNestedQuery(AssociationFindManyArgs)
  async findAssociations(
    @common.Req() request: Request,
    @common.Param() params: FederationWhereUniqueInput
  ): Promise<Association[]> {
    const query = plainToClass(AssociationFindManyArgs, request.query);
    const results = await this.service.findAssociations(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,

        structure: {
          select: {
            id: true,
          },
        },

        federation: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/associations")
  async connectAssociations(
    @common.Param() params: FederationWhereUniqueInput,
    @common.Body() body: AssociationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      associations: {
        connect: body,
      },
    };
    await this.service.updateFederation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/associations")
  async updateAssociations(
    @common.Param() params: FederationWhereUniqueInput,
    @common.Body() body: AssociationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      associations: {
        set: body,
      },
    };
    await this.service.updateFederation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/associations")
  async disconnectAssociations(
    @common.Param() params: FederationWhereUniqueInput,
    @common.Body() body: AssociationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      associations: {
        disconnect: body,
      },
    };
    await this.service.updateFederation({
      where: params,
      data,
      select: { id: true },
    });
  }
}
