/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsDate,
  MaxLength,
  IsOptional,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { Federation } from "../../federation/base/Federation";
import { Association } from "../../association/base/Association";
import { Agence } from "../../agence/base/Agence";
import { Utilisateur } from "../../utilisateur/base/Utilisateur";

@ObjectType()
class Structure {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  affectationDomaine!: string | null;

  @ApiProperty({
    required: false,
    type: () => Federation,
  })
  @ValidateNested()
  @Type(() => Federation)
  @IsOptional()
  federation?: Federation | null;

  @ApiProperty({
    required: false,
    type: () => Association,
  })
  @ValidateNested()
  @Type(() => Association)
  @IsOptional()
  association?: Association | null;

  @ApiProperty({
    required: false,
    type: () => Agence,
  })
  @ValidateNested()
  @Type(() => Agence)
  @IsOptional()
  agence?: Agence | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  libelle!: string | null;

  @ApiProperty({
    required: false,
    type: () => Utilisateur,
  })
  @ValidateNested()
  @Type(() => Utilisateur)
  @IsOptional()
  utilisateur?: Utilisateur | null;
}

export { Structure as Structure };
